version: "3.9"

services:
  db:
    image: postgres:16
    restart: unless-stopped
    environment:
      POSTGRES_DB: UnsecuredAPIKeys
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - db-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "65432:5432"

  webapi:
    build:
      context: .
      dockerfile: UnsecuredAPIKeys.WebAPI/Dockerfile
    depends_on:
      db:
        condition: service_healthy
    environment:
      ASPNETCORE_ENVIRONMENT: Production
      ConnectionStrings__DefaultConnection: Host=db;Database=UnsecuredAPIKeys;Username=postgres;Password=postgres;Port=5432
    ports:
      - "5000:8080"
    restart: unless-stopped

  verifier:
    build:
      context: .
      dockerfile: UnsecuredAPIKeys.Bots.Verifier/Dockerfile
    depends_on:
      db:
        condition: service_healthy
    environment:
      ConnectionStrings__DefaultConnection: Host=db;Database=UnsecuredAPIKeys;Username=postgres;Password=postgres;Port=5432
    restart: unless-stopped

  scraper:
    build:
      context: .
      dockerfile: UnsecuredAPIKeys.Bots.Scraper/Dockerfile
    depends_on:
      db:
        condition: service_healthy
    environment:
      ConnectionStrings__DefaultConnection: Host=db;Database=UnsecuredAPIKeys;Username=postgres;Password=postgres;Port=5432
    restart: unless-stopped

  ui:
    build:
      context: UnsecuredAPIKeys.UI
      dockerfile: Dockerfile
    depends_on:
      - webapi
    environment:
      NEXT_PUBLIC_API_BASE: http://localhost:5000
    ports:
      - "3000:3000"
    restart: unless-stopped

volumes:
  db-data: